package machine;

import java.util.Scanner;
import java.util.stream.Stream;

public class CoffeeMachine {

    static int cash = 550;

    static int water = 400; //1200
    static int milk = 540;
    static int coffeeBeans = 120;
    static int cup = 9;

    public static int getCash() {
        return cash;
    }

    public static void setCash(int cash) {
        CoffeeMachine.cash = cash;
    }

    public static int getWater() {
        return water;
    }

    public static void setWater(int water) {
        CoffeeMachine.water = water;
    }

    public static int getMilk() {
        return milk;
    }

    public static void setMilk(int milk) {
        CoffeeMachine.milk = milk;
    }

    public static int getCoffeeBeans() {
        return coffeeBeans;
    }

    public static void setCoffeeBeans(int coffeeBeans) {
        CoffeeMachine.coffeeBeans = coffeeBeans;
    }

    public static int getCup() {
        return cup;
    }

    public static void setCup(int cup) {
        CoffeeMachine.cup = cup;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        CoffeeMachine coffeeMachine = new CoffeeMachine();
        Espresso espresso = new Espresso();
        Latte latte = new Latte();
        Cappuccino cappuccino = new Cappuccino();

        do {
            // coffeeMachine.printSupply();
            System.out.println("Write action (buy, fill, take, remaining, exit):  ");
            String answer1 = scanner.next();
            if (answer1.equals("buy")) {
                System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: ");
                String answer = scanner.next();
                if (answer.equals("back")) continue;
                int answer2 = Integer.parseInt(answer);
                if (answer2 == 1 && espresso.isEnoughResources(1)) {
                    espresso.make(1);
                } else if (answer2 == 2 && latte.isEnoughResources(1)) {
                    latte.make(1);
                } else if (answer2 == 3 && cappuccino.isEnoughResources(1)) {
                    cappuccino.make(1);
                }
            } else if (answer1.equals("fill")) {
                System.out.println("Write how many ml of water do you want to add:");
                CoffeeMachine.setWater(CoffeeMachine.getWater() + scanner.nextInt());

                System.out.println("Write how many ml of milk do you want to add: ");
                CoffeeMachine.setMilk(CoffeeMachine.getMilk() + scanner.nextInt());

                System.out.println("Write how many grams of coffee beans do you want to add: ");
                CoffeeMachine.setCoffeeBeans(CoffeeMachine.getCoffeeBeans() + scanner.nextInt());

                System.out.println("Write how many disposable cups of coffee do you want to add: ");
                CoffeeMachine.setCup(CoffeeMachine.getCup() + scanner.nextInt());
            } else if (answer1.equals("take")) {
                System.out.println("I gave you $" + CoffeeMachine.getCash());
                CoffeeMachine.setCash(0);
            } else if (answer1.equals("remaining")) {
                coffeeMachine.printSupply();
            } else if (answer1.equals("exit")) {
                System.exit(0);
            }


        }
        while (true);


    }


    public static void runCM() {


    }

    public void printSupply() {
        System.out.println("The coffee machine has:");
        System.out.println(getWater() + " of water");
        System.out.println(getMilk() + " of milk");
        System.out.println(getCoffeeBeans() + " of coffee beans");
        System.out.println(getCup() + " of disposable cups");
        System.out.println(getCash() + "$ of money");
        System.out.println();
    }


    public static class Cappuccino extends CoffeeMachine implements Producible {
        int water = 200;
        int milk = 100;
        int coffeeBeans = 12;
        int prise = 6;

        @Override
        public void make(int quantity) {
            CoffeeMachine.setCup(CoffeeMachine.getCup() - quantity);
            CoffeeMachine.setCash(CoffeeMachine.getCash() + quantity * prise);
            CoffeeMachine.setCoffeeBeans(CoffeeMachine.getCoffeeBeans() - quantity * coffeeBeans);
            CoffeeMachine.setMilk(CoffeeMachine.getMilk() - quantity * milk);
            CoffeeMachine.setWater(CoffeeMachine.getWater() - quantity * water);
        }


        @Override
        public boolean isEnoughResources(int quantity) {

            boolean isEnoughWater;
            boolean isEnoughMilk;
            boolean isEnoughCoffeeBeans;
            boolean isEnoughCups;

            if ((CoffeeMachine.getCup() - quantity) >= 0) isEnoughCups = true;
            else {
                System.out.println("Sorry, not enough cups");
                return false;
            }

            if (CoffeeMachine.getWater() - quantity * this.water >= 0) isEnoughWater = true;
            else {
                System.out.println("Sorry, not enough water");
                return false;
            }

            if (CoffeeMachine.getMilk() - quantity * this.milk >= 0) isEnoughMilk = true;
            else {
                System.out.println("Sorry, not enough water!");
                return false;
            }

            if (CoffeeMachine.getCoffeeBeans() - quantity * this.coffeeBeans >= 0) isEnoughCoffeeBeans = true;
            else {
                System.out.println("Sorry, not enough coffee beans");
                return false;
            }

            if (isEnoughCoffeeBeans && isEnoughMilk && isEnoughWater && isEnoughCups) {
                System.out.println("I have enough resources, making you a coffee!");
                return true;
            } else {
                return false;
            }
        }
    }

    public static class Espresso implements Producible {

        int water = 250;
        int milk = 0;
        int coffeeBeans = 16;
        int prise = 4;


        public int getWater() {
            return water;
        }

        public int getMilk() {
            return milk;
        }

        public int getCoffeeBeans() {
            return coffeeBeans;
        }

        public int getPrise() {
            return prise;
        }

        @Override
        public void make(int quantity) {

            CoffeeMachine.setCup(CoffeeMachine.getCup() - quantity);

            CoffeeMachine.setCash(CoffeeMachine.getCash() + quantity * prise);
            CoffeeMachine.setCoffeeBeans(CoffeeMachine.getCoffeeBeans() - quantity * coffeeBeans);
            CoffeeMachine.setMilk(CoffeeMachine.getMilk() - quantity * milk);
            CoffeeMachine.setWater(CoffeeMachine.getWater() - quantity * water);
        }

        @Override
        public boolean isEnoughResources(int quantity) {

            boolean isEnoughWater;
            boolean isEnoughMilk;
            boolean isEnoughCoffeeBeans;
            boolean isEnoughCups;

            if ((CoffeeMachine.getCup() - quantity) >= 0) isEnoughCups = true;
            else {
                System.out.println("Sorry, not enough cups");
                return false;
            }

            if (CoffeeMachine.getWater() - quantity * this.water >= 0) isEnoughWater = true;
            else {
                System.out.println("Sorry, not enough water");
                return false;
            }

            if (CoffeeMachine.getMilk() - quantity * this.milk >= 0) isEnoughMilk = true;
            else {
                System.out.println("Sorry, not enough water");
                return false;
            }

            if (CoffeeMachine.getCoffeeBeans() - quantity * this.coffeeBeans >= 0) isEnoughCoffeeBeans = true;
            else {
                System.out.println("Sorry, not enough coffee beans");
                return false;
            }

            if (isEnoughCoffeeBeans && isEnoughMilk && isEnoughWater && isEnoughCups) {
                System.out.println("I have enough resources, making you a coffee!");
                return true;
            } else {
                return false;
            }
        }
    }

    public static class Latte implements Producible {
        //For the latte, the coffee machine needs
        // 350 ml of water,
        // 75 ml of milk, and
        // 20 g of coffee beans.
        // It costs $7.
        int water = 350;
        int milk = 75;
        int coffeeBeans = 20;
        int prise = 7;


        public int getWater() {
            return water;
        }

        public int getMilk() {
            return milk;
        }

        public int getCoffeeBeans() {
            return coffeeBeans;
        }

        public int getPrise() {
            return prise;
        }

        @Override
        public void make(int quantity) {
            CoffeeMachine.setCup(CoffeeMachine.getCup() - quantity);

            CoffeeMachine.setCash(CoffeeMachine.getCash() + quantity * prise);
            CoffeeMachine.setCoffeeBeans(CoffeeMachine.getCoffeeBeans() - quantity * coffeeBeans);
            CoffeeMachine.setMilk(CoffeeMachine.getMilk() - quantity * milk);
            CoffeeMachine.setWater(CoffeeMachine.getWater() - quantity * water);

        }

        @Override
        public boolean isEnoughResources(int quantity) {

            boolean isEnoughWater;
            boolean isEnoughMilk;
            boolean isEnoughCoffeeBeans;
            boolean isEnoughCups;

            if ((CoffeeMachine.getCup() - quantity) >= 0) isEnoughCups = true;
            else {
                System.out.println("Sorry, not enough cups");
                return false;
            }

            if (CoffeeMachine.getWater() - quantity * this.water >= 0) isEnoughWater = true;
            else {
                System.out.println("Sorry, not enough water");
                return false;
            }

            if (CoffeeMachine.getMilk() - quantity * this.milk >= 0) isEnoughMilk = true;
            else {
                System.out.println("Sorry, not enough water");
                return false;
            }

            if (CoffeeMachine.getCoffeeBeans() - quantity * this.coffeeBeans >= 0) isEnoughCoffeeBeans = true;
            else {
                System.out.println("Sorry, not enough coffee beans");
                return false;
            }

            if (isEnoughCoffeeBeans && isEnoughMilk && isEnoughWater && isEnoughCups) {
                System.out.println("I have enough resources, making you a coffee!");
                System.out.println();
                return true;
            } else {
                return false;
            }
        }
    }

    public interface Producible {
        void make(int quantity);

        boolean isEnoughResources(int quantity);
    }

}
